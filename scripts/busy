#!/bin/bash

# A shell script that will pretty much do the same thing that Log by Josh
# Avanier is doing. He never published his CLI client, so I'll just make my own,
# with the same idea of having one big text file, CSV style, that will just do
# the job.

# Format of a BUSY entry goes like this:
# ID Start_Date End_Date Activity Project Description

if [ ! -f "$BUSYFILE" ]; then
	echo 'No $BUSYFILE created'
fi
fileEmpty=$(wc -w < $BUSYFILE); # 0 if no words

errorExit(){
	invalidActionMessage="Unknown action: $2

the following actions are valid:
	help, create, delete, print, start, end"

	startedWithoutFinishing="Can not start another action when you haven't finished the last one.";
	finishedWithoutStarting="Can not end an action when you haven't started one";

	case "$1" in
		'invalidAction') echo -e "$invalidActionMessage";;
		'startedWithoutFinishing') echo -e "$startedWithoutFinishing";;
		'finishedWithoutStarting') echo -e "$finishedWithoutStarting";;
	esac
	exit 1;
}

function timestamp(){
	date +"%Y-%m-%dT%H:%M:%S";
}

actions(){
	# passing arguments through to the action functions
	# since start and end are interactive, they don't need any arguments
	case "$1" in
		'create') createEntry "${@:2}";;
		'delete') deleteEntry "${@:2}";;
		'print') printEntries "${@:2}";;
		'start') startEntry ;;
		'end') endEntry ;;
		'help') printHelp ;;
	esac
}

function startEntry(){
	[ $(isLastActionDone) = "no" ] && errorExit "startedWithoutFinishing";

	echo -e "Activity:\t"
	read action
	echo "Project:"
	read project
	echo "Description:"
	read description

	createEntry "$action" "$project" "$description"
}

# Creates an entry. Also exists in case someone wants to make an alias
function createEntry(){
	# param $1 - activity
	# param $2 - project
	# param $3 - details
	startTime=$(timestamp);
	entryId=$(getNewEntryId);
	echo $entryId,$startTime,,"$1","$2","$3" >> $BUSYFILE
}
# Finishes last entry. Aka puts an "END" timestamp on it
function endEntry(){
	[ ! $(isLastActionDone) = "no" ] && errorExit "finishedWithoutStarting";

	endTime=$(timestamp);
	while IFS="," read -r entryId startTime emptyEndTime activity project details 
	do
		sed -i "/^$entryId,/d" $BUSYFILE;
		echo $entryId,$startTime,$endTime,"$activity","$project","$details" >> $BUSYFILE
	done < <(printEntries 1)
}

# TODO: implement this
function deleteEntry(){
	# param $1 - id
	echo "deleteEntry "$@""
}

function getNewEntryId(){
	lastId=$(tail -n 1 < $BUSYFILE | cut -d, -f 1);
	# if file is empty
	[ "$fileEmpty" -eq 0 ] && lastId=0;
	((newId=$lastId+1))
	echo $newId;
}

function isLastActionDone(){
	[ "$fileEmpty" -eq 0 ] && echo "yes" && return
	endDateField=$(tail -n 1 < $BUSYFILE | cut -d, -f 3);
	[ $(echo $endDateField | wc -w) -eq 0 ] && echo "no" || echo "yes";
}

function printEntries(){
	# param $1 - count
	if [ -z $1 ];
	then lineCount=10
	else lineCount=$1;
	fi;
	tail -n $lineCount < $BUSYFILE
}
function printHelp(){
	# The following text is not tabbed, but spaced. So automatic tabbing might
	# mess it up
	helpText="Usage: busy [action] [arguments]

Actions:
  start
    Launches an interactive menu for the \"busy create\" command

  create
    Creates a busy entry in the \$BUSYFILE
    Usage: start <activity> <project> <details>

    activity - activity that could be common across many projects (Ex. Research, Debug)
    project - Project name
    details - Details about current session

  end
    Ends an entry

  print
    Prints last <number> (default: 10) entries out

    Usage: print <number>

  help      Displays this text
";

	echo -e "$helpText";
}


# check if the first argument is a valid action
case "$1" in
	create|delete|print|start|end|help) valid=1;;
	*) valid=0;;
esac
((valid==0)) && errorExit "invalidAction" "$1"

actions "$1" "${@:2}"

# this works for arguments that can have a string with spaces
# for x in "${@:3}"
# do
# 	echo "$x"
# done

# TODO:
# - help message
# - primary functionality
